# This is a basic workflow to help you get started with Actions

name: HCL AppScan on Cloud SAST

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the AltoroJ-3.2 branch
  push:
    branches: [ AltoroJ-3.2 ]
  pull_request:
    branches: [ AltoroJ-3.2 ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout Main Repo
        uses: actions/checkout@v2
          
      # Runs a set of commands using the runners shell
      - name: Gradle Build
        run: |
          ls -la
          #gradle build
          
      # Runs AppScan Step
      - name: HCL AppScan Static Analyzer
        # You may pin to the exact commit or the version.
        # uses: HCL-TECH-SOFTWARE/appscan-sast-action@3826511ac1043c4ffbea72bba9d450755a95338c
        uses: HCL-TECH-SOFTWARE/appscan-sast-action@v1
        with:
          # API key for connecting to ASoC.
          asoc_key: ${{ secrets.ASOC_KEY }}
          # Secret for connecting to ASoC.
          asoc_secret: ${{ secrets.ASOC_SECRET }}
          # The ASoC application id where your scan will appear.
          application_id: ${{ secrets.ASOC_APPID }}
          # The name of the scan created in ASoC.
          scan_name: Github_Actions_Scan
          # Make the scan a personal scan.
          personal_scan: false
          # Only run static analysis. Do not run SCA (Software Composition Analysis).
          static_analysis_only: false
          # Only run SCA (Software Composition Analysis). Do not run static analysis.
          open_source_only: false
          # By default only source code files will be analyzed. Enabling this option will result in build output files for Java and .NET to be analyzed (.jar/.war/.ear/.dll/.exe). Additionally, Maven, Gradle, and Visual Studio solutions will be built if the build environment is available.
          scan_build_outputs: true
          # By default this action will initiate the scan in ASoC, but it will not wait for analysis to complete. Enabling this option will cause the action to wait for analysis to complete. Note that this will cause the action to run longer.
          wait_for_analysis: true
          # If wait_for_analysis is true, the number of minutes to wait for analysis to complete. The default is 30 minutes.
          analysis_timeout_minutes: 30
          # If wait_for_analysis is true, fail the job if any non-compliant issues are found in the scan.
          fail_for_noncompliance: true
          # If fail_for_noncompliance is enabled, the severity that indicates a failure. Lesser severities will not be considered a failure. For example, if failure_threshold is set to Medium, Informational and/or Low severity issues will not cause a failure. Medium, High, and/or Critical issues will cause a failure.
          failure_threshold: High
